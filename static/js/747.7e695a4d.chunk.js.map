{"version":3,"file":"static/js/747.7e695a4d.chunk.js","mappings":"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","sources":["components/Admin/Sidebar.jsx","components/Admin/AdminLayout.jsx","components/Admin/DashboardCharts.jsx","pages/Admin/Dashboard/Dashboard.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport { Link, useLocation } from 'react-router-dom'\r\n\r\nimport { Box, HStack, Text } from '@chakra-ui/react'\r\n\r\n//Icons/Images Stuff\r\nimport { AiFillDashboard, AiOutlineUser } from 'react-icons/ai'\r\nimport { GiMaterialsScience } from 'react-icons/gi'\r\nimport { IoIosCreate } from 'react-icons/io'\r\n\r\n\r\nconst Sidebar = () => {\r\n\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      <section id=\"Sidebar\">\r\n        <Box w={['90%','full']} m={['5','0']} p='2' boxShadow='dark-lg'>\r\n\r\n          <SideBarLink title={'dashboard'} icon={<AiFillDashboard />} active={location.pathname === '/admin/dashboard'} />\r\n          <SideBarLink title={'Create Course'} link={'createcourse'} icon={<AiOutlineUser />} active={location.pathname === '/admin/createcourse'} />\r\n          <SideBarLink title={'users'} icon={<GiMaterialsScience />} active={location.pathname === '/admin/users'} />\r\n          <SideBarLink title={'courses'} icon={<IoIosCreate />} active={location.pathname === '/admin/courses'} />\r\n\r\n\r\n        </Box>\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n\r\n\r\n// ---------------- Link of the sidebar \r\nexport const SideBarLink = ({ title, icon, active, link }) => {\r\n  return (\r\n    <Link to={`/admin/${link ? link : title}`} style={{ width: '100%' }}> <HStack my='2' mx='auto' textTransform={'capitalize'} textColor={active ? 'salmon' : ''}>\r\n      <Text>{icon}</Text> <Text>{title}</Text>  </HStack> </Link>\r\n  )\r\n}","import React, { useEffect } from 'react'\r\n\r\nimport { Grid} from '@chakra-ui/react'\r\n\r\nimport toast from 'react-hot-toast'\r\n\r\n//---------Redux store specific stuff\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { clearCoursesError } from '../../Store/CourseSlice'\r\nimport { clearAdminError } from '../../Store/AdminSlice'\r\n\r\n//Admin Component Stuff\r\nimport Sidebar from './Sidebar'\r\n\r\n\r\nconst AdminLayout = ({ children }) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { success, msg } = useSelector(state => state.course)\r\n  const { success: adminSuccess, msg: adminMsg } = useSelector(state => state.admin)\r\n\r\n  useEffect(() => { //Related to courses only\r\n\r\n    if (success === true && msg)\r\n      toast.success(msg);\r\n    else if (success === false && msg)\r\n      toast.error(msg);\r\n\r\n    dispatch(clearCoursesError());\r\n\r\n  }, [dispatch, success, msg]);\r\n\r\n\r\n  useEffect(() => { //Related to admin slice stuff\r\n\r\n    if (adminSuccess === true && adminMsg)\r\n      toast.success(adminMsg);\r\n\r\n    else if (adminSuccess === false && adminMsg)\r\n      toast.error(adminMsg);\r\n\r\n    dispatch(clearAdminError());\r\n\r\n  }, [dispatch, adminSuccess, adminMsg]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <section id=\"AdminLayout\">\r\n\r\n        <Grid templateColumns={['1fr', '1fr 2fr']} >\r\n\r\n          {/* Sidebar show for navigation  */}\r\n          <Sidebar />\r\n\r\n\r\n          {/* Here the children to show related page data  */}\r\n            {children}\r\n        </Grid>\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AdminLayout\r\n","import React from 'react'\r\n\r\n//-------------ChartJS Specific Stuff\r\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, ArcElement, Tooltip, Legend } from 'chart.js';\r\n\r\nimport { Line, Doughnut } from 'react-chartjs-2'\r\n\r\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, ArcElement, Tooltip, Legend)\r\n\r\n// --------------- A line chart, is help we show how many subscribe or un subscribe users \r\nexport const LineChart = ({ views = [] }) => {\r\n\r\n    const labels = getLastyearMonth();\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom'\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: \"Yearly Views\"\r\n            }\r\n        }\r\n    }\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [{\r\n            label: \"Views\",\r\n            data: views,\r\n            borderColor: 'purple',\r\n            backgroundColor: '#6b46c1'\r\n        }]\r\n    };\r\n\r\n    return <Line options={options} data={data} />\r\n}\r\n\r\n\r\n// --------------- A area label to showing subscribe and not subscribe doughnut chart \r\nexport const DoughnutChart = ({ users = [] }) => {\r\n\r\n    const labels = ['Subscribed', 'Not Subscribed'];\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [{\r\n            data: users,\r\n            borderColor: ['rgba(214,43,120)', 'raba(310,29,290,0.2)'],\r\n            backgroundColor: ['#6b46c1', 'rgba(214,43,120,0.3'],\r\n            borderWidth: 1\r\n        }]\r\n    };\r\n\r\n    return <Doughnut data={data} />\r\n\r\n}\r\n\r\n//------------ Now we show labels in form of months \r\nconst getLastyearMonth = () => {\r\n\r\n    let labels = []; //all months in current month\r\n\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n    const currentMonth = new Date().getMonth();\r\n\r\n    const remain = 11 - currentMonth;\r\n\r\n    //Now looping on month from remain\r\n    for (let i = currentMonth; i < months.length; i--) {\r\n        labels.unshift(months[i]);\r\n        if (i === 0) break;\r\n    }\r\n\r\n\r\n    //Now push other remaing months which \r\n    for (let i = 11; i > remain; i--) {\r\n        if (i === currentMonth) break;\r\n        labels.unshift(months[i]);\r\n    }\r\n\r\n    return labels;\r\n}","import React, { useEffect } from 'react'\r\n\r\nimport { Box, Grid, HStack, Heading, Progress, Stack, Text, VStack } from '@chakra-ui/react'\r\n\r\n// --------- Redux store specific stuff\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { handleFetchDashboardStats } from '../../../Store/AdminSlice'\r\n\r\n//Admin Layout Stuff\r\nimport AdminLayout from '../../../components/Admin/AdminLayout'\r\n\r\n//Icons/Images Specific Stuff\r\nimport { BiDownArrowAlt, BiUpArrowAlt } from 'react-icons/bi'\r\n\r\n//Components Stuff\r\nimport TextHighlight from '../../../components/Layout/TextHighlight'\r\nimport Loading from '../../../components/Layout/Loading'\r\nimport { DoughnutChart, LineChart } from '../../../components/Admin/DashboardCharts'\r\n\r\n\r\nconst Dashboard = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { stats: {\r\n        Counts, Profit, Percentage, statsData\r\n    }, loading } = useSelector(state => state.admin);\r\n\r\n    useEffect(() => {\r\n        dispatch(handleFetchDashboardStats()); //api to fetch stats for dashboard\r\n    }, [dispatch]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <AdminLayout >\r\n\r\n                <section id=\"Dashboard\" style={{padding : \"10px\"}}>\r\n\r\n                    <Heading>Dashboard</Heading>\r\n\r\n                    <Text textAlign={'center'} my='2' size={'sm'}> Last Change On {String(new Date(statsData?.[11]?.createdAt)).split('G')[0]} </Text>\r\n\r\n                    {loading && <Loading />}\r\n\r\n                    {/* Here is the container, where we show assets like views,users and subscription */}\r\n                    <Box my='2' p='5'>\r\n                        <Stack alignItems={'center'} justifyContent={['center','space-evenly']} direction={['column', 'row']} spacing={'4'}>\r\n                            <AssetsCard qty={Counts?.viewsCount || 0} title='Views' qtyPercentage={Percentage?.viewsPercentage} profitable={Profit?.viewsProfit} />\r\n\r\n                            <AssetsCard qty={Counts?.usersCount || 0} title='Users' qtyPercentage={Percentage?.usersPercentage} profitable={Profit?.usersProfit} />\r\n\r\n                            <AssetsCard qty={Counts?.subscriptionsCount || 0} title='Subscription' profitable={Profit?.subscriptionsProfit} qtyPercentage={Percentage?.subscriptionsPercentage} />\r\n                        </Stack>\r\n                    </Box>\r\n\r\n                    {/* Here We showing the charts is related to the dataset  */}\r\n                    <Box my='2' width={'100%'} p={['5', '10']} display={'block'} mx={'auto'} boxShadow={'2xl'} >\r\n                        <LineChart views={statsData?.map(item => (item.views))} />\r\n\r\n                    </Box>\r\n\r\n                    <Box my='5' p='2'>\r\n                        <Grid p='3' justifyContent={'space-between'} templateColumns={['1fr', '4fr 3fr']}>\r\n\r\n                            {/* Here We show the users profit or not compare to last month  */}\r\n                            <Box>\r\n                                <TextHighlight size='md' title='Progress Bar 📈' />\r\n\r\n                                <VStack align={'center'} justifyContent={'start'}>\r\n\r\n                                    <ProgressBar title={'Views'} value={Percentage?.viewsPercentage} profit={Profit?.viewsProfit} />\r\n                                    <ProgressBar title={'Users'} value={Percentage?.usersPercentage} profit={Profit?.usersProfit} />\r\n                                    <ProgressBar title={'Subscribe'} value={Percentage?.subscriptionsPercentage} profit={Profit?.subscriptionsProfit} />\r\n                                </VStack>\r\n\r\n                            </Box>\r\n\r\n                            {/* Here we show the users, who subscribe or who is not  */}\r\n                            <Box display={'block'} mx='auto' h={'40vh'}>\r\n                                <TextHighlight color='salmon' size='md' title='Users' />\r\n\r\n                                {/* Doughut graph  */}\r\n                                <DoughnutChart users={[Counts?.subscriptionsCount, Counts?.usersCount - Counts?.subscriptionsCount]} />\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n\r\n                    </Box>\r\n\r\n                </section>\r\n\r\n            </AdminLayout>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n\r\n\r\n//------------------ Card to show assets are in form of profitables or not\r\nexport const AssetsCard = ({ title, icon, profitable = true, qty, qtyPercentage }) => {\r\n    return (\r\n\r\n        <Box w={['100%','50%']} display={['block','inline']}  p='3' borderRadius={'md'} boxShadow={'dark-lg'} my='2' mx={['auto','2']}>\r\n\r\n            {/* Here we showing the stats counts and title of stats card  */}\r\n            <Heading size={'sm'}>{title}</Heading>\r\n            <HStack justify={'space-between'}>\r\n                <Heading > <strong>{qty}</strong></Heading>\r\n\r\n                <HStack spacing={'1'} justifyContent={'space-evenly'}>\r\n                    <Text color={profitable ? 'green.500' : 'red.500'}>{qtyPercentage }</Text>\r\n                    <Text color={profitable ? 'green.500' : 'red.500'}>%</Text>\r\n\r\n                    <Text color={profitable ? 'green.500' : 'red.500'}><strong>{profitable ? <BiUpArrowAlt display={'inline'} color='green.500' /> : <BiDownArrowAlt display={'inline'} color='red.500' />} </strong></Text>\r\n\r\n                </HStack>\r\n\r\n            </HStack>\r\n            <Text mt='1' size={'sm'}>Since Last Month</Text>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\n//-------------- Create a progress bar to showing the processing of our app\r\nexport const ProgressBar = ({ title, value, profit = true }) => {\r\n    // const profit = 100-value;\r\n    return (\r\n        <Box p='3' w='full' my='3' boxShadow={'dark-lg'}>\r\n\r\n            <Heading size={'md'} >{title}</Heading>\r\n            <HStack>\r\n\r\n                <Text>{value >= 100 ? (value-100)/100+1 : value}%</Text>\r\n\r\n                <Progress colorScheme={`${profit ? 'purple' : 'red'}`} w='full' value={value} />\r\n\r\n                <Text>100%</Text>\r\n            </HStack>\r\n\r\n        </Box>\r\n    )\r\n}"],"names":["location","useLocation","_jsx","_Fragment","children","id","_jsxs","Box","w","m","p","boxShadow","SideBarLink","title","icon","AiFillDashboard","active","pathname","link","AiOutlineUser","GiMaterialsScience","IoIosCreate","_ref","Link","to","concat","style","width","HStack","my","mx","textTransform","textColor","Text","dispatch","useDispatch","_useSelector","useSelector","state","course","success","msg","_useSelector2","admin","adminSuccess","adminMsg","useEffect","toast","error","clearCoursesError","clearAdminError","Grid","templateColumns","Sidebar","Chart","register","CategoryScale","LinearScale","PointElement","LineElement","Title","ArcElement","Tooltip","Legend","LineChart","_ref$views","views","data","labels","getLastyearMonth","datasets","label","borderColor","backgroundColor","Line","options","responsive","plugins","legend","position","display","text","DoughnutChart","_ref2","_ref2$users","users","borderWidth","Doughnut","months","currentMonth","Date","getMonth","remain","i","length","unshift","_statsData$","_useSelector$stats","stats","Counts","Profit","Percentage","statsData","loading","handleFetchDashboardStats","AdminLayout","padding","Heading","textAlign","size","String","createdAt","split","Loading","Stack","alignItems","justifyContent","direction","spacing","AssetsCard","qty","viewsCount","qtyPercentage","viewsPercentage","profitable","viewsProfit","usersCount","usersPercentage","usersProfit","subscriptionsCount","subscriptionsProfit","subscriptionsPercentage","map","item","TextHighlight","VStack","align","ProgressBar","value","profit","h","color","_ref$profitable","borderRadius","justify","BiUpArrowAlt","BiDownArrowAlt","mt","_ref2$profit","Progress","colorScheme"],"sourceRoot":""}